#!/usr/bin/env bash

# From htps://github.com/empeee/dotfiles

git_status() {
	local s='';
    local bracket=']';
	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
        [ -n "${s}" ] && s="(${s})";
        echo -e "${1}${s}${2}${bracket}";
	else
		return;
	fi;
}

git_branch() {
    local branchName='';
    local bracket='[';
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
        branchName="$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")";
        echo -e ${1}${bracket}${2}${branchName};
    else
        return;
    fi;
}

#if tput setaf 1 &> /dev/null; then
#	tput sgr0; # reset colors
#	bold=$(tput bold);
#	reset=$(tput sgr0);
#	# Solarized colors, taken from http://git.io/solarized-colors.
#	black=$(tput setaf 0);
#	blue=$(tput setaf 33);
#	cyan=$(tput setaf 37);
#	green=$(tput setaf 64);
#	orange=$(tput setaf 166);
#	purple=$(tput setaf 125);
#	red=$(tput setaf 124);
#	violet=$(tput setaf 61);
#	white=$(tput setaf 15);
#	yellow=$(tput setaf 136);
#else
bold='';
reset="\e[0m";
black="\e[1;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[1;33m";
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";
grey="\e[0;37m";
#fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${bold}${orange}";
else
	userStyle="${bold}${green}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${purple}";
else
	hostStyle="${bold}${purple}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
#PS1+="\[${bold}\]\n"; # newline
# Terminal looks like:
# [user@hostname /full/dir/path][branch]$  
PS1+="\[${white}\][";
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\]@";
PS1+="\[${hostStyle}\]\h "; # host
#PS1+="\[${white}\]:";
PS1+="\[${blue}\]\w"; # working directory full path
PS1+="\[${white}\]]";
PS1+="\$(git_branch \"\[${white}\]\" \"\[${cyan}\]\")"; # Git repo details
PS1+="\$(git_status \"\[${yellow}\]\" \"\[${white}\]\")"; # Commit status
# PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)

export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
